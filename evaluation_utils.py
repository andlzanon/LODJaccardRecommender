import numpy as np
import pandas as pd


def calculate_prediction(movie: int, profile: pd.DataFrame, sim_matrix: pd.DataFrame, k: int):
    """
    Calculates the prediction of a user to like a movie
    :param movie: movie that the user may like
    :param profile: user profile with items interacted
    :param sim_matrix: similarity matrix
    :param k: number of neighbors
    :return: sum os similarities that predicts if the user will like an item
    """
    curr_n = 0
    i = 1
    prediction = 0

    similar_movies = sim_matrix.loc[movie].sort_values(ascending=False)
    while curr_n < k and i < len(similar_movies):
        neig_movie = similar_movies.index[i]
        if neig_movie in profile.index:
            prediction = prediction + similar_movies.iloc[i]
            curr_n = curr_n + 1
        i = i + 1

    if curr_n != 0:
        prediction = prediction / curr_n

    return prediction


def generate_map(sim_matrix: pd.DataFrame, test_set: pd.DataFrame, user_item: pd.DataFrame, n: int, k: int):
    """
    Function that calculates the map accuracy metric considering the sim_matrix generated by the method
    :param sim_matrix: item x item similarity matrix
    :param test_set: test set of data set
    :param user_item: user x item matrix
    :param n: number of items recommended
    :param k: number of neighbors considered
    :return: float number that is the mean average precision of the recommendation engine
    """
    test_set = test_set.set_index('user_id')
    map_users = pd.DataFrame(index=test_set.index.unique(), columns=['map'])

    users = test_set.index.unique()[:300]
    for user_id in users:
        user_interactions = user_item.loc[user_id].sort_values()

        profile = user_interactions[user_interactions == 1]
        prediction = user_interactions[user_interactions.isnull()]

        for movie in prediction.index:
            prediction.loc[movie] = calculate_prediction(movie, profile, sim_matrix, k)

        prediction = prediction.sort_values(ascending=False)
        recommended_movies = prediction[:n]
        len_rel = len(test_set.loc[user_id])
        n_hits = 0
        ap = 0

        test_user_movies = test_set.loc[user_id]['movie_id'].tolist()

        if type(test_user_movies) != list:
            test_user_movies = [test_user_movies]

        for rank in range(0, len(recommended_movies.index)):
            movie = recommended_movies.index[rank]
            if movie in test_user_movies:
                n_hits = n_hits + 1
                ap = ap + (n_hits / (rank + 1))

        if n_hits > 0:
            u_ap = ap / len_rel
        else:
            u_ap = 0

        print("user: " + str(user_id) + " AP: " + str(u_ap))
        map_users.loc[user_id] = u_ap

    return map_users.mean()['map']


def generate_accuracy_results(recommender,
                        k_values: list, file_path: str, name: str):
    """
    Compute map accuracy results for proposed and recommended
    :param lod_rec: lod dbpedia recommender
    :param baseline_rec: baseline cosine recommender
    :param k_values: vector of k params to test
    :return: file with results
    """
    f = open(file_path, "w")
    f.write(name + ":\n")
    for k in k_values:
        print("--- K = " + str(k) + " ---")
        f.write("--- K = " + str(k) + " ---\n")

        recommender.set_k(k)

        f.write("Algorithm MAP: " + str(recommender.generate_map()))

    f.close()